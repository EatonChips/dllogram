#include <iostream>
#include <windows.h>
#include <vector>

#include "util.h"

  std::vector<char> {{ index .V "base64_decode" }}(const unsigned char* {{ index .V "input" }}, size_t {{ index .V "in_len" }}) {
    constexpr static unsigned char {{ index .V "kDecodingTable" }}[] = {
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 62, 64, 64, 64, 63,
      52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 64, 64, 64, 64, 64,
      64,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
      15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 64, 64, 64, 64,
      64, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
      41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64
    };

    std::string {{ index .V "out" }} = "";

    // size_t {{ index .V "in_len" }} = {{ index .V "inputSize" }};
    // if (in_len % 4 != 0) return "Input data size is not a multiple of 4";

    size_t {{ index .V "out_len" }} = {{ index .V "in_len" }} / 4 * 3;
    if ({{ index .V "input" }}[{{ index .V "in_len" }} - 1] == '=') {{ index .V "out_len" }}--;
    if ({{ index .V "input" }}[{{ index .V "in_len" }} - 2] == '=') {{ index .V "out_len" }}--;

    {{ index .V "out" }}.resize({{ index .V "out_len" }});

    for (size_t i = 0, j = 0; i < {{ index .V "in_len" }};) {
      uint32_t a = {{ index .V "input" }}[i] == '=' ? 0 & i++ : {{ index .V "kDecodingTable" }}[static_cast<int>({{ index .V "input" }}[i++])];
      uint32_t b = {{ index .V "input" }}[i] == '=' ? 0 & i++ : {{ index .V "kDecodingTable" }}[static_cast<int>({{ index .V "input" }}[i++])];
      uint32_t c = {{ index .V "input" }}[i] == '=' ? 0 & i++ : {{ index .V "kDecodingTable" }}[static_cast<int>({{ index .V "input" }}[i++])];
      uint32_t d = {{ index .V "input" }}[i] == '=' ? 0 & i++ : {{ index .V "kDecodingTable" }}[static_cast<int>({{ index .V "input" }}[i++])];

      uint32_t triple = (a << 3 * 6) + (b << 2 * 6) + (c << 1 * 6) + (d << 0 * 6);

      if (j < {{ index .V "out_len" }}) {{ index .V "out" }}[j++] = (triple >> 2 * 8) & 0xFF;
      if (j < {{ index .V "out_len" }}) {{ index .V "out" }}[j++] = (triple >> 1 * 8) & 0xFF;
      if (j < {{ index .V "out_len" }}) {{ index .V "out" }}[j++] = (triple >> 0 * 8) & 0xFF;
    }

    std::vector<char> {{ index .V "outVector" }}({{ index .V "out" }}.begin(), {{ index .V "out" }}.end());

    return {{ index .V "outVector" }};
}
